#ifndef _SSD1306_FONT
#define _SSD1306_FONT

#include "ssd1306_commands.h"

// uint8_t* pfont = &font;
const uint16_t scale_lut[256];

FontOffset offset;
CharAttributes character;

/*
 * @brief a simple function that takes a byte and returns its inverse
 * 
 * @param byte: the byte to be inversed
*/
uint8_t reverse_bits(uint8_t byte);

/*
 * @brief a simple function that takes a byte and returns a byte that is scaled by 2. i.e. 0b10 becomes 0b1100
 *
 * @param input: the byte to be scaled
 * @return the scaled byte
 * 
 */
uint16_t scale_byte(uint8_t input);

/* 
 * @brief a function that calculates the location of a character in the font array provided that the character is in the font
 *
 * @param character: the character to be searched for in the font array
 * @return a pointer to the location of the character in the font array
 */
uint8_t* get_font_pointer(uint8_t character);

/*
 * @brief the useful ascii symbols and letters in an 8x5 pixel format. the Space character is the first character which is indexed at 0x20 (32 decimal)
 */
const uint8_t ascii_font[310] = { 0x00, 0x00, 0x00, 0x00, 0x00,
                                  0x00, 0xBF, 0x00, 0x00, 0x00,
                                  0x00, 0x07, 0x00, 0x07, 0x00,
                                  0x14, 0x3E, 0x14, 0x3E, 0x14,
                                  0x24, 0x4A, 0xFF, 0x52, 0x24,
                                  0x4C, 0x2C, 0x10, 0x68, 0x64,
                                  0x76, 0x99, 0xB1, 0x62, 0xB0,
                                  0x00, 0x07, 0x00, 0x00, 0x00,
                                  0x00, 0x3C, 0x42, 0x81, 0x00,
                                  0x00, 0x81, 0x42, 0x3C, 0x00,
                                  0x00, 0x05, 0x02, 0x05, 0x00,
                                  0x00, 0x10, 0x38, 0x10, 0x00,
                                  0x00, 0x80, 0x40, 0x00, 0x00,
                                  0x00, 0x10, 0x10, 0x10, 0x00,
                                  0x00, 0x80, 0x00, 0x00, 0x00,
                                  0xC0, 0x20, 0x18, 0x04, 0x03,
                                  0x7E, 0x81, 0x81, 0x81, 0x7E,
                                  0x00, 0x82, 0xFF, 0x80, 0x00,
                                  0xC6, 0xA1, 0x91, 0x89, 0x86,
                                  0x42, 0x89, 0x89, 0x89, 0x76,
                                  0x0C, 0x0A, 0x09, 0xFF, 0x08,
                                  0x67, 0x89, 0x89, 0x89, 0x71,
                                  0x7E, 0x89, 0x89, 0x89, 0x72,
                                  0xC1, 0x21, 0x11, 0x09, 0x07,
                                  0x76, 0x89, 0x89, 0x89, 0x76,
                                  0x0E, 0x11, 0x11, 0x11, 0xFE,
                                  0x00, 0x00, 0x48, 0x00, 0x00,
                                  0x00, 0x80, 0x48, 0x00, 0x00,
                                  0x10, 0x28, 0x28, 0x44, 0x44,
                                  0x28, 0x28, 0x28, 0x28, 0x28, 
                                  0x44, 0x44, 0x28, 0x28, 0x10,
                                  0x06, 0x01, 0xA1, 0x11, 0x0E,
                                  0x7E, 0x42, 0x5A, 0x5A, 0x5E,
                                  0xFE, 0x11, 0x11, 0x11, 0xFE,
                                  0xFF, 0x89, 0x89, 0x89, 0x76,
                                  0x7E, 0x81, 0x81, 0x81, 0x42,
                                  0xFF, 0x81, 0x81, 0x81, 0x7E,
                                  0xFF, 0x89, 0x89, 0x89, 0x81,
                                  0xFF, 0x09, 0x09, 0x09, 0x01,
                                  0x7E, 0x81, 0x81, 0x91, 0x72,
                                  0xFF, 0x10, 0x10, 0x10, 0xFF,
                                  0x81, 0x81, 0xFF, 0x81, 0x81,
                                  0x60, 0x81, 0x81, 0x81, 0x7F,
                                  0xFF, 0x08, 0x08, 0x14, 0xE3,
                                  0xFF, 0x80, 0x80, 0x80, 0xC0,
                                  0xFF, 0x02, 0x0C, 0x02, 0xFF,
                                  0xFF, 0x02, 0x3C, 0x40, 0xFF,
                                  0x7E, 0x81, 0x81, 0x81, 0x7E,
                                  0xFF, 0x11, 0x11, 0x11, 0x0E,
                                  0x3E, 0x41, 0x61, 0x41, 0xBE,
                                  0xFF, 0x11, 0x11, 0x11, 0xEE,
                                  0x46, 0x89, 0x89, 0x89, 0x72,
                                  0x03, 0x01, 0xFF, 0x01, 0x03,
                                  0x7F, 0x80, 0x80, 0x80, 0x7F,
                                  0x3F, 0x40, 0x80, 0x40, 0x3F,
                                  0x3F, 0xC0, 0x30, 0xC0, 0x3F,
                                  0xC3, 0x24, 0x18, 0x24, 0xC3,
                                  0x07, 0x08, 0xF0, 0x08, 0x07,
                                  0xE1, 0x91, 0x89, 0x85, 0x83,
                                  0x00, 0xFF, 0x81, 0x81, 0x00,
                                  0x03, 0x04, 0x18, 0x20, 0xC0,
                                  0x00, 0x81, 0x81, 0xFF, 0x00 };

const uint16_t scale_lut[256] = {
    0x0000, 0x0003, 0x000C, 0x000F, 0x0030, 0x0033, 0x003C, 0x003F, 0x00C0, 0x00C3, 0x00CC, 0x00CF, 0x00F0, 0x00F3, 0x00FC, 0x00FF,
    0x0300, 0x0303, 0x030C, 0x030F, 0x0330, 0x0333, 0x033C, 0x033F, 0x03C0, 0x03C3, 0x03CC, 0x03CF, 0x03F0, 0x03F3, 0x03FC, 0x03FF,
    0x0C00, 0x0C03, 0x0C0C, 0x0C0F, 0x0C30, 0x0C33, 0x0C3C, 0x0C3F, 0x0CC0, 0x0CC3, 0x0CCC, 0x0CCF, 0x0CF0, 0x0CF3, 0x0CFC, 0x0CFF,
    0x0F00, 0x0F03, 0x0F0C, 0x0F0F, 0x0F30, 0x0F33, 0x0F3C, 0x0F3F, 0x0FC0, 0x0FC3, 0x0FCC, 0x0FCF, 0x0FF0, 0x0FF3, 0x0FFC, 0x0FFF,
    0x3000, 0x3003, 0x300C, 0x300F, 0x3030, 0x3033, 0x303C, 0x303F, 0x30C0, 0x30C3, 0x30CC, 0x30CF, 0x30F0, 0x30F3, 0x30FC, 0x30FF,
    0x3300, 0x3303, 0x330C, 0x330F, 0x3330, 0x3333, 0x333C, 0x333F, 0x33C0, 0x33C3, 0x33CC, 0x33CF, 0x33F0, 0x33F3, 0x33FC, 0x33FF,
    0x3C00, 0x3C03, 0x3C0C, 0x3C0F, 0x3C30, 0x3C33, 0x3C3C, 0x3C3F, 0x3CC0, 0x3CC3, 0x3CCC, 0x3CCF, 0x3CF0, 0x3CF3, 0x3CFC, 0x3CFF,
    0x3F00, 0x3F03, 0x3F0C, 0x3F0F, 0x3F30, 0x3F33, 0x3F3C, 0x3F3F, 0x3FC0, 0x3FC3, 0x3FCC, 0x3FCF, 0x3FF0, 0x3FF3, 0x3FFC, 0x3FFF,
    0xC000, 0xC003, 0xC00C, 0xC00F, 0xC030, 0xC033, 0xC03C, 0xC03F, 0xC0C0, 0xC0C3, 0xC0CC, 0xC0CF, 0xC0F0, 0xC0F3, 0xC0FC, 0xC0FF,
    0xC300, 0xC303, 0xC30C, 0xC30F, 0xC330, 0xC333, 0xC33C, 0xC33F, 0xC3C0, 0xC3C3, 0xC3CC, 0xC3CF, 0xC3F0, 0xC3F3, 0xC3FC, 0xC3FF,
    0xCC00, 0xCC03, 0xCC0C, 0xCC0F, 0xCC30, 0xCC33, 0xCC3C, 0xCC3F, 0xCCC0, 0xCCC3, 0xCCCC, 0xCCCF, 0xCCF0, 0xCCF3, 0xCCFC, 0xCCFF,
    0xCF00, 0xCF03, 0xCF0C, 0xCF0F, 0xCF30, 0xCF33, 0xCF3C, 0xCF3F, 0xCFC0, 0xCFC3, 0xCFCC, 0xCFCF, 0xCFF0, 0xCFF3, 0xCFFC, 0xCFFF,
    0xF000, 0xF003, 0xF00C, 0xF00F, 0xF030, 0xF033, 0xF03C, 0xF03F, 0xF0C0, 0xF0C3, 0xF0CC, 0xF0CF, 0xF0F0, 0xF0F3, 0xF0FC, 0xF0FF,
    0xF300, 0xF303, 0xF30C, 0xF30F, 0xF330, 0xF333, 0xF33C, 0xF33F, 0xF3C0, 0xF3C3, 0xF3CC, 0xF3CF, 0xF3F0, 0xF3F3, 0xF3FC, 0xF3FF,
    0xFC00, 0xFC03, 0xFC0C, 0xFC0F, 0xFC30, 0xFC33, 0xFC3C, 0xFC3F, 0xFCC0, 0xFCC3, 0xFCCC, 0xFCCF, 0xFCF0, 0xFCF3, 0xFCFC, 0xFCFF,
    0xFF00, 0xFF03, 0xFF0C, 0xFF0F, 0xFF30, 0xFF33, 0xFF3C, 0xFF3F, 0xFFC0, 0xFFC3, 0xFFCC, 0xFFCF, 0xFFF0, 0xFFF3, 0xFFFC, 0xFFFF
};

#ifndef SMALL_FONT
const uint8_t font[50] = {
0x7E, 0x81, 0x81, 0x81, 0x7E, // 0
0x00, 0x41, 0xFF, 0x01, 0x00, // 1
0x63, 0x85, 0x89, 0x91, 0x61, // 2
0x42, 0x91, 0x91, 0x91, 0x6E, // 3
0x18, 0x28, 0x48, 0xFF, 0x08, // 4
0xE6, 0x91, 0x91, 0x91, 0x8E, // 5
0x7E, 0x91, 0x91, 0x91, 0x4E, // 6
0xC3, 0x84, 0x88, 0x90, 0xE0, // 7
0x6E, 0x91, 0x91, 0x91, 0x6E, // 8
0x70, 0x88, 0x88, 0x88, 0x7F  // 9
};
#endif //SMALL_FONT

#ifdef OLD_FONT
const uint8_t font[310] = {0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xFD, 0x00, 0x00, 0x00,
0x00, 0xE0, 0x00, 0xE0, 0x00,
0x28, 0x7C, 0x28, 0x7C, 0x28,
0x24, 0x52, 0xFF, 0x4A, 0x24,
0x32, 0x34, 0x08, 0x16, 0x26,
0x6E, 0x99, 0x8D, 0x46, 0x0D,
0x00, 0xE0, 0x00, 0x00, 0x00,
0x00, 0x3C, 0x42, 0x81, 0x00,
0x00, 0x81, 0x42, 0x3C, 0x00,
0x00, 0xA0, 0x40, 0xA0, 0x00,
0x00, 0x08, 0x1C, 0x08, 0x00,
0x00, 0x01, 0x02, 0x00, 0x00,
0x00, 0x08, 0x08, 0x08, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00,
0x03, 0x04, 0x18, 0x20, 0xC0,
0x7E, 0x81, 0x81, 0x81, 0x7E,
0x00, 0x41, 0xFF, 0x01, 0x00,
0x63, 0x85, 0x89, 0x91, 0x61,
0x42, 0x91, 0x91, 0x91, 0x6E,
0x18, 0x28, 0x48, 0xFF, 0x08,
0xE6, 0x91, 0x91, 0x91, 0x8E,
0x7E, 0x91, 0x91, 0x91, 0x4E,
0x83, 0x84, 0x88, 0x90, 0xE0,
0x6E, 0x91, 0x91, 0x91, 0x6E,
0x70, 0x88, 0x88, 0x88, 0x7F,
0x00, 0x00, 0x12, 0x00, 0x00,
0x00, 0x01, 0x12, 0x00, 0x00,
0x08, 0x14, 0x14, 0x22, 0x22,
0x14, 0x14, 0x14, 0x14, 0x14,
0x22, 0x22, 0x14, 0x14, 0x08,
0x60, 0x80, 0x85, 0x88, 0x70,
0x7E, 0x42, 0x5A, 0x5A, 0x7A,
0x7F, 0x88, 0x88, 0x88, 0x7F,
0xFF, 0x91, 0x91, 0x91, 0x6E,
0x7E, 0x81, 0x81, 0x81, 0x42,
0xFF, 0x81, 0x81, 0x81, 0x7E,
0xFF, 0x91, 0x91, 0x91, 0x81,
0xFF, 0x90, 0x90, 0x90, 0x80,
0x7E, 0x81, 0x81, 0x89, 0x4E,
0xFF, 0x08, 0x08, 0x08, 0xFF,
0x81, 0x81, 0xFF, 0x81, 0x81,
0x06, 0x81, 0x81, 0x81, 0xFE,
0xFF, 0x10, 0x10, 0x28, 0xC7,
0xFF, 0x01, 0x01, 0x01, 0x03,
0xFF, 0x40, 0x30, 0x40, 0xFF,
0xFF, 0x40, 0x3C, 0x02, 0xFF,
0x7E, 0x81, 0x81, 0x81, 0x7E,
0xFF, 0x88, 0x88, 0x88, 0x70,
0x7C, 0x82, 0x86, 0x82, 0x7D,
0xFF, 0x88, 0x88, 0x88, 0x77,
0x62, 0x91, 0x91, 0x91, 0x4E,
0xC0, 0x80, 0xFF, 0x80, 0xC0,
0xFE, 0x01, 0x01, 0x01, 0xFE,
0xFC, 0x02, 0x01, 0x02, 0xFC,
0xFC, 0x03, 0x0C, 0x03, 0xFC,
0xC3, 0x24, 0x18, 0x24, 0xC3,
0xE0, 0x10, 0x0F, 0x10, 0xE0,
0x87, 0x89, 0x91, 0xA1, 0xC1,
0x00, 0xFF, 0x81, 0x81, 0x00,
0xC0, 0x20, 0x18, 0x04, 0x03, 
0x00, 0x81, 0x81, 0xFF, 0x00};


#ifdef FLIP_TABLE
// Precomputed table for fast byte-wise bit reversal
static const uint8_t reverse_table[256] = {
0x00, 0x80, 0x40, 0xC0, 0x20, 0xA0, 0x60, 0xE0, 0x10, 0x90, 0x50, 0xD0, 0x30, 0xB0, 0x70, 0xF0,
0x08, 0x88, 0x48, 0xC8, 0x28, 0xA8, 0x68, 0xE8, 0x18, 0x98, 0x58, 0xD8, 0x38, 0xB8, 0x78, 0xF8,
0x04, 0x84, 0x44, 0xC4, 0x24, 0xA4, 0x64, 0xE4, 0x14, 0x94, 0x54, 0xD4, 0x34, 0xB4, 0x74, 0xF4,
0x0C, 0x8C, 0x4C, 0xCC, 0x2C, 0xAC, 0x6C, 0xEC, 0x1C, 0x9C, 0x5C, 0xDC, 0x3C, 0xBC, 0x7C, 0xFC,
0x02, 0x82, 0x42, 0xC2, 0x22, 0xA2, 0x62, 0xE2, 0x12, 0x92, 0x52, 0xD2, 0x32, 0xB2, 0x72, 0xF2,
0x0A, 0x8A, 0x4A, 0xCA, 0x2A, 0xAA, 0x6A, 0xEA, 0x1A, 0x9A, 0x5A, 0xDA, 0x3A, 0xBA, 0x7A, 0xFA,
0x06, 0x86, 0x46, 0xC6, 0x26, 0xA6, 0x66, 0xE6, 0x16, 0x96, 0x56, 0xD6, 0x36, 0xB6, 0x76, 0xF6,
0x0E, 0x8E, 0x4E, 0xCE, 0x2E, 0xAE, 0x6E, 0xEE, 0x1E, 0x9E, 0x5E, 0xDE, 0x3E, 0xBE, 0x7E, 0xFE,
0x01, 0x81, 0x41, 0xC1, 0x21, 0xA1, 0x61, 0xE1, 0x11, 0x91, 0x51, 0xD1, 0x31, 0xB1, 0x71, 0xF1,
0x09, 0x89, 0x49, 0xC9, 0x29, 0xA9, 0x69, 0xE9, 0x19, 0x99, 0x59, 0xD9, 0x39, 0xB9, 0x79, 0xF9,
0x05, 0x85, 0x45, 0xC5, 0x25, 0xA5, 0x65, 0xE5, 0x15, 0x95, 0x55, 0xD5, 0x35, 0xB5, 0x75, 0xF5,
0x0D, 0x8D, 0x4D, 0xCD, 0x2D, 0xAD, 0x6D, 0xED, 0x1D, 0x9D, 0x5D, 0xDD, 0x3D, 0xBD, 0x7D, 0xFD,
0x03, 0x83, 0x43, 0xC3, 0x23, 0xA3, 0x63, 0xE3, 0x13, 0x93, 0x53, 0xD3, 0x33, 0xB3, 0x73, 0xF3,
0x0B, 0x8B, 0x4B, 0xCB, 0x2B, 0xAB, 0x6B, 0xEB, 0x1B, 0x9B, 0x5B, 0xDB, 0x3B, 0xBB, 0x7B, 0xFB,
0x07, 0x87, 0x47, 0xC7, 0x27, 0xA7, 0x67, 0xE7, 0x17, 0x97, 0x57, 0xD7, 0x37, 0xB7, 0x77, 0xF7,
0x0F, 0x8F, 0x4F, 0xCF, 0x2F, 0xAF, 0x6F, 0xEF, 0x1F, 0x9F, 0x5F, 0xDF, 0x3F, 0xBF, 0x7F, 0xFF
};
#endif // FLIP_TABLE
#endif // OLD_FONT


/*
uint8_t font[305] = {0x00, 0x00, 0x00, 0x00, 0x00,  //  space  
0x00, 0xFD, 0x00, 0x00, 0x00,  //  !  
0x00, 0xE0, 0x00, 0xE0, 0x00,  //  " 
0x28, 0x7C, 0x28, 0x7C, 0x28,  //  # 
0x24, 0x52, 0xFF, 0x4A, 0x24,  //  $ 
0x32, 0x34, 0x08, 0x16, 0x26,  //  % 
0x6E, 0x99, 0x8D, 0x46, 0x0D,  //  & 
0x00, 0xE0, 0x00, 0x00, 0x00,  //  ' 
0x00, 0x3C, 0x42, 0x81, 0x00,  //  ( 
0x00, 0x81, 0x42, 0x3C, 0x00,  //  ) 
0x00, 0xA0, 0x40, 0xA0, 0x00,  //  * 
0x00, 0x08, 0x1C, 0x08, 0x00,  //  + 
0x00, 0x01, 0x02, 0x00, 0x00,  //  , 
0x00, 0x08, 0x08, 0x08, 0x00,  //  - 
0x00, 0x01, 0x00, 0x00, 0x00,  //  . 
0x03, 0x04, 0x18, 0x20, 0xC0,  //  / 
0x7E, 0x81, 0x81, 0x81, 0x7E,  //  0 
0x00, 0x41, 0xFF, 0x01, 0x00,  //  1 
0x63, 0x85, 0x89, 0x91, 0x61,  //  2 
0x42, 0x91, 0x91, 0x91, 0x6E,  //  3 
0x18, 0x28, 0x48, 0xFF, 0x08,  //  4 
0xE6, 0x91, 0x91, 0x91, 0x8E,  //  5 
0x7E, 0x91, 0x91, 0x91, 0x4E,  //  6 
0x83, 0x84, 0x88, 0x90, 0xE0,  //  7 
0x6E, 0x91, 0x91, 0x91, 0x6E,  //  8 
0x70, 0x88, 0x88, 0x88, 0x7F,  //  9 
0x00, 0x00, 0x12, 0x00, 0x00,  //  : 
0x00, 0x01, 0x12, 0x00, 0x00,  //  ; 
0x08, 0x14, 0x14, 0x22, 0x22,  //  < 
0x14, 0x14, 0x14, 0x14, 0x14,  //  = 
0x22, 0x22, 0x14, 0x14, 0x08,  //  > 
0x60, 0x80, 0x85, 0x88, 0x70,  //  ? 
0x7E, 0x42, 0x5A, 0x5A, 0x7A,  //  @ 
0x7F, 0x88, 0x88, 0x88, 0x7F,  //  A 
0xFF, 0x91, 0x91, 0x91, 0x6E,  //  B 
0x7E, 0x81, 0x81, 0x81, 0x42,  //  C 
0xFF, 0x81, 0x81, 0x81, 0x7E,  //  D 
0xFF, 0x91, 0x91, 0x91, 0x81,  //  E 
0xFF, 0x90, 0x90, 0x90, 0x80,  //  F 
0x7E, 0x81, 0x81, 0x89, 0x4E,  //  G 
0xFF, 0x08, 0x08, 0x08, 0xFF,  //  H 
0x81, 0x81, 0xFF, 0x81, 0x81,  //  I 
0x06, 0x81, 0x81, 0x81, 0xFE,  //  J 
0xFF, 0x10, 0x10, 0x28, 0xC7,  //  K 
0xFF, 0x01, 0x01, 0x01, 0x03,  //  L 
0xFF, 0x40, 0x30, 0x40, 0xFF,  //  M 
0xFF, 0x40, 0x3C, 0x02, 0xFF,  //  N 
0x7E, 0x81, 0x81, 0x81, 0x7E,  //  O 
0xFF, 0x88, 0x88, 0x88, 0x70,  //  P 
0x7C, 0x82, 0x86, 0x82, 0x7D,  //  Q 
0xFF, 0x88, 0x88, 0x88, 0x77,  //  R 
0x62, 0x91, 0x91, 0x91, 0x4E,  //  S 
0xC0, 0x80, 0xFF, 0x80, 0xC0,  //  T 
0xFE, 0x01, 0x01, 0x01, 0xFE,  //  U 
0xFC, 0x02, 0x01, 0x02, 0xFC,  //  V 
0xFC, 0x03, 0x0C, 0x03, 0xFC,  //  W 
0xC3, 0x24, 0x18, 0x24, 0xC3,  //  X 
0xE0, 0x10, 0x0F, 0x10, 0xE0,  //  Y  
0x87, 0x89, 0x91, 0xA1, 0xC1,  //  Z 
0x00, 0xFF, 0x81, 0x81, 0x00,  //  [ 
0xC0, 0x20, 0x18, 0x04, 0x03,  //  \ 
0x00, 0x81, 0x81, 0xFF, 0x00}  //  ] 
*/

//  null
//  start of heading
//  start of text
//  end of text
//  end of transmission
//  enquiry
//  acknowledge
//  bell
//  backspace
//  horizontal tab
//  line feed
//  vertical tab
//  form feed
//  carraige return
//  shift out
//  shift in
//  data link escape
//  device ctrl 1
//  device ctrl 2
//  device ctrl 3
//  device ctrl 4
//  negative acknowledge
//  sync. idle
//  end of trans.
//  cancel
//  end of medium
//  substitute
//  escape
//  file seperator
//  group seperator
//  record seperator
//  unit seperator
//  space
//  !
//  "
//  #
//  $
//  %
//  &
//  '
//  (
//  )
//  *
//  +
//  ,
//  -
//  .
//  /
//  0
//  1
//  2
//  3
//  4
//  5
//  6
//  7
//  8
//  9
//  :
//  ;
//  <
//  =
//  >
//  ?
//  @
//  A
//  B
//  C
//  D
//  E
//  F
//  G
//  H
//  I
//  J
//  K
//  L
//  M
//  N
//  O
//  P
//  Q
//  R
//  S
//  T
//  U
//  V
//  W
//  X
//  Y
//  Z
//  [
//  \
//  ]


#endif // _SSD1306_FONT