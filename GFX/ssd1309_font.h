
#ifndef _SSD1309_FONT
#define _SSD1309_FONT

#include "ssd1309_commands.h"

// uint8_t* pfont = &font;
const uint16_t scale_lut[256];

FontOffset offset;
CharAttributes character;

/*
 * @brief a simple function that takes a byte and returns its inverse
 * 
 * @param byte: the byte to be inversed
*/
uint8_t reverse_bits(uint8_t byte);

/*
 * @brief a simple function that takes a byte and returns a byte that is scaled by 2. i.e. 0b10 becomes 0b1100
 *
 * @param input: the byte to be scaled
 * @return the scaled byte
 * 
 */
uint16_t scale_byte(uint8_t input);

/* 
 * @brief a function that calculates the location of a character in the font array provided that the character is in the font
 *
 * @param character: the character to be searched for in the font array
 * @return a pointer to the location of the character in the font array
 */
uint8_t* get_font_pointer(uint8_t character);

/*
 * @brief the useful ascii symbols and letters in an 8x5 pixel format. the Space character is the first character which is indexed at 0x20 (32 decimal)
 */
const uint8_t ascii_font[475] = {0x00, 0x00, 0x00, 0x00, 0x00,  //  space  
                                 0x00, 0xbf, 0x00, 0x00, 0x00,  //  !  
                                 0x00, 0x07, 0x00, 0x07, 0x00,  //  " 
                                 0x14, 0x3e, 0x14, 0x3e, 0x14,  //  # 
                                 0x24, 0x4a, 0xff, 0x52, 0x24,  //  $ 
                                 0x4c, 0x2c, 0x10, 0x68, 0x64,  //  % 
                                 0x76, 0x99, 0xb1, 0x62, 0xb0,  //  & 
                                 0x00, 0x07, 0x00, 0x00, 0x00,  //  ' 
                                 0x00, 0x3c, 0x42, 0x81, 0x00,  //  ( 
                                 0x00, 0x81, 0x42, 0x3c, 0x00,  //  ) 
                                 0x00, 0x05, 0x02, 0x05, 0x00,  //  * 
                                 0x00, 0x10, 0x38, 0x10, 0x00,  //  + 
                                 0x00, 0x80, 0x40, 0x00, 0x00,  //  , 
                                 0x00, 0x10, 0x10, 0x10, 0x00,  //  - 
                                 0x00, 0x80, 0x00, 0x00, 0x00,  //  . 
                                 0xc0, 0x20, 0x18, 0x04, 0x03,  //  / 
                                 0x7e, 0x81, 0x81, 0x81, 0x7e,  //  0 
                                 0x00, 0x82, 0xff, 0x80, 0x00,  //  1 
                                 0xc6, 0xa1, 0x91, 0x89, 0x86,  //  2 
                                 0x42, 0x89, 0x89, 0x89, 0x76,  //  3 
                                 0x18, 0x14, 0x12, 0xff, 0x10,  //  4 
                                 0x67, 0x89, 0x89, 0x89, 0x71,  //  5 
                                 0x7e, 0x89, 0x89, 0x89, 0x72,  //  6 
                                 0xc1, 0x21, 0x11, 0x09, 0x07,  //  7 
                                 0x76, 0x89, 0x89, 0x89, 0x76,  //  8 
                                 0x0e, 0x11, 0x11, 0x11, 0xfe,  //  9 
                                 0x00, 0x00, 0x48, 0x00, 0x00,  //  : 
                                 0x00, 0x80, 0x48, 0x00, 0x00,  //  ; 
                                 0x10, 0x28, 0x28, 0x44, 0x44,  //  < 
                                 0x28, 0x28, 0x28, 0x28, 0x28,  //  = 
                                 0x44, 0x44, 0x28, 0x28, 0x10,  //  > 
                                 0x06, 0x01, 0xa1, 0x11, 0x0e,  //  ? 
                                 0x7e, 0x42, 0x5a, 0x5a, 0x5e,  //  @ 
                                 0xfe, 0x11, 0x11, 0x11, 0xfe,  //  A 
                                 0xff, 0x89, 0x89, 0x89, 0x76,  //  B 
                                 0x7e, 0x81, 0x81, 0x81, 0x42,  //  C 
                                 0xff, 0x81, 0x81, 0x81, 0x7e,  //  D 
                                 0xff, 0x89, 0x89, 0x89, 0x81,  //  E 
                                 0xff, 0x09, 0x09, 0x09, 0x01,  //  F 
                                 0x7e, 0x81, 0x81, 0x91, 0x72,  //  G 
                                 0xff, 0x10, 0x10, 0x10, 0xff,  //  H 
                                 0x81, 0x81, 0xff, 0x81, 0x81,  //  I 
                                 0x60, 0x81, 0x81, 0x81, 0x7f,  //  J 
                                 0xff, 0x08, 0x08, 0x14, 0xe3,  //  K 
                                 0xff, 0x80, 0x80, 0x80, 0xc0,  //  L 
                                 0xff, 0x02, 0x0c, 0x02, 0xff,  //  M 
                                 0xff, 0x02, 0x3c, 0x40, 0xff,  //  N 
                                 0x7e, 0x81, 0x81, 0x81, 0x7e,  //  O 
                                 0xff, 0x11, 0x11, 0x11, 0x0e,  //  P 
                                 0x3e, 0x41, 0x61, 0x41, 0xbe,  //  Q 
                                 0xff, 0x11, 0x11, 0x11, 0xee,  //  R 
                                 0x46, 0x89, 0x89, 0x89, 0x72,  //  S 
                                 0x03, 0x01, 0xff, 0x01, 0x03,  //  T 
                                 0x7f, 0x80, 0x80, 0x80, 0x7f,  //  U 
                                 0x3f, 0x40, 0x80, 0x40, 0x3f,  //  V 
                                 0x3f, 0xc0, 0x30, 0xc0, 0x3f,  //  W 
                                 0xc3, 0x24, 0x18, 0x24, 0xc3,  //  X 
                                 0x07, 0x08, 0xf0, 0x08, 0x07,  //  Y  
                                 0xe1, 0x91, 0x89, 0x85, 0x83,  //  Z 
                                 0x00, 0x00, 0xff, 0x81, 0x00,  //  [
                                 0x03, 0x04, 0x18, 0x20, 0xc0,  //  "\"
                                 0x00, 0x81, 0xff, 0x00, 0x00,  //  ]
                                 0x00, 0x08, 0x04, 0x08, 0x00,  //  ^
                                 0x80, 0x80, 0x80, 0x80, 0x80,  //  _
                                 0x03, 0x02, 0x00, 0x00, 0x00,  //  `
                                 0xf0, 0x28, 0x24, 0x28, 0xf0,  //  a
                                 0xfe, 0x90, 0x90, 0x90, 0x60,  //  b
                                 0x70, 0x88, 0x88, 0x88, 0x00,  //  c
                                 0x70, 0x88, 0x90, 0xa0, 0xfe,  //  d
                                 0x70, 0xa8, 0xa8, 0xa8, 0x30,  //  e
                                 0x20, 0xfc, 0x22, 0x22, 0x0c,  //  f
                                 0x98, 0xa4, 0xa4, 0xa4, 0x78,  //  g
                                 0xfe, 0x10, 0x10, 0xf0, 0x00,  //  h
                                 0x00, 0x00, 0xe8, 0x00, 0x00,  //  i
                                 0x40, 0x80, 0x80, 0x7a, 0x00,  //  j
                                 0xfe, 0x20, 0x30, 0x48, 0x80,  //  k
                                 0x00, 0x7e, 0x80, 0x00, 0x00,  //  l
                                 0xf8, 0x10, 0xe0, 0x10, 0xe0,  //  m
                                 0xF8, 0x10, 0x08, 0xF8, 0x00,  //  n
                                 0x70, 0x88, 0x88, 0x88, 0x70,  //  o
                                 0xfe, 0x12, 0x12, 0x0c, 0x00,  //  p
                                 0x0c, 0x12, 0x12, 0xfe, 0x80,  //  q
                                 0xf8, 0x10, 0x10, 0x20, 0x00,  //  r
                                 0x48, 0x94, 0xb4, 0xa4, 0x48,  //  s
                                 0x10, 0x7e, 0x90, 0x10, 0x00,  //  t
                                 0x70, 0x80, 0x80, 0xf0, 0x00,  //  u
                                 0x30, 0x40, 0x80, 0x40, 0x30,  //  v
                                 0x70, 0x80, 0x60, 0x80, 0x70,  //  w
                                 0x88, 0x50, 0x20, 0x50, 0x88,  //  x
                                 0x44, 0x9c, 0xa0, 0xa4, 0xfc,  //  y
                                 0xc8, 0xa8, 0xa8, 0xa8, 0x98,  //  z
                                 0x00, 0x18, 0x66, 0x81, 0x81,  //  {
                                 0x00, 0x00, 0xff, 0x00, 0x00,  //  |
                                 0x81, 0x81, 0x66, 0x18, 0x00,  //  }
                                 0x0c, 0x04, 0x0c, 0x08, 0x0c,  //  ~
};


const uint16_t scale_lut[256] = {
    0x0000, 0x0003, 0x000C, 0x000F, 0x0030, 0x0033, 0x003C, 0x003F, 0x00C0, 0x00C3, 0x00CC, 0x00CF, 0x00F0, 0x00F3, 0x00FC, 0x00FF,
    0x0300, 0x0303, 0x030C, 0x030F, 0x0330, 0x0333, 0x033C, 0x033F, 0x03C0, 0x03C3, 0x03CC, 0x03CF, 0x03F0, 0x03F3, 0x03FC, 0x03FF,
    0x0C00, 0x0C03, 0x0C0C, 0x0C0F, 0x0C30, 0x0C33, 0x0C3C, 0x0C3F, 0x0CC0, 0x0CC3, 0x0CCC, 0x0CCF, 0x0CF0, 0x0CF3, 0x0CFC, 0x0CFF,
    0x0F00, 0x0F03, 0x0F0C, 0x0F0F, 0x0F30, 0x0F33, 0x0F3C, 0x0F3F, 0x0FC0, 0x0FC3, 0x0FCC, 0x0FCF, 0x0FF0, 0x0FF3, 0x0FFC, 0x0FFF,
    0x3000, 0x3003, 0x300C, 0x300F, 0x3030, 0x3033, 0x303C, 0x303F, 0x30C0, 0x30C3, 0x30CC, 0x30CF, 0x30F0, 0x30F3, 0x30FC, 0x30FF,
    0x3300, 0x3303, 0x330C, 0x330F, 0x3330, 0x3333, 0x333C, 0x333F, 0x33C0, 0x33C3, 0x33CC, 0x33CF, 0x33F0, 0x33F3, 0x33FC, 0x33FF,
    0x3C00, 0x3C03, 0x3C0C, 0x3C0F, 0x3C30, 0x3C33, 0x3C3C, 0x3C3F, 0x3CC0, 0x3CC3, 0x3CCC, 0x3CCF, 0x3CF0, 0x3CF3, 0x3CFC, 0x3CFF,
    0x3F00, 0x3F03, 0x3F0C, 0x3F0F, 0x3F30, 0x3F33, 0x3F3C, 0x3F3F, 0x3FC0, 0x3FC3, 0x3FCC, 0x3FCF, 0x3FF0, 0x3FF3, 0x3FFC, 0x3FFF,
    0xC000, 0xC003, 0xC00C, 0xC00F, 0xC030, 0xC033, 0xC03C, 0xC03F, 0xC0C0, 0xC0C3, 0xC0CC, 0xC0CF, 0xC0F0, 0xC0F3, 0xC0FC, 0xC0FF,
    0xC300, 0xC303, 0xC30C, 0xC30F, 0xC330, 0xC333, 0xC33C, 0xC33F, 0xC3C0, 0xC3C3, 0xC3CC, 0xC3CF, 0xC3F0, 0xC3F3, 0xC3FC, 0xC3FF,
    0xCC00, 0xCC03, 0xCC0C, 0xCC0F, 0xCC30, 0xCC33, 0xCC3C, 0xCC3F, 0xCCC0, 0xCCC3, 0xCCCC, 0xCCCF, 0xCCF0, 0xCCF3, 0xCCFC, 0xCCFF,
    0xCF00, 0xCF03, 0xCF0C, 0xCF0F, 0xCF30, 0xCF33, 0xCF3C, 0xCF3F, 0xCFC0, 0xCFC3, 0xCFCC, 0xCFCF, 0xCFF0, 0xCFF3, 0xCFFC, 0xCFFF,
    0xF000, 0xF003, 0xF00C, 0xF00F, 0xF030, 0xF033, 0xF03C, 0xF03F, 0xF0C0, 0xF0C3, 0xF0CC, 0xF0CF, 0xF0F0, 0xF0F3, 0xF0FC, 0xF0FF,
    0xF300, 0xF303, 0xF30C, 0xF30F, 0xF330, 0xF333, 0xF33C, 0xF33F, 0xF3C0, 0xF3C3, 0xF3CC, 0xF3CF, 0xF3F0, 0xF3F3, 0xF3FC, 0xF3FF,
    0xFC00, 0xFC03, 0xFC0C, 0xFC0F, 0xFC30, 0xFC33, 0xFC3C, 0xFC3F, 0xFCC0, 0xFCC3, 0xFCCC, 0xFCCF, 0xFCF0, 0xFCF3, 0xFCFC, 0xFCFF,
    0xFF00, 0xFF03, 0xFF0C, 0xFF0F, 0xFF30, 0xFF33, 0xFF3C, 0xFF3F, 0xFFC0, 0xFFC3, 0xFFCC, 0xFFCF, 0xFFF0, 0xFFF3, 0xFFFC, 0xFFFF
};

#endif //
